file.names = as.numeric(sub("\\.csv$","",fileList))
selected.files = fileList[match(c(2, 4, 8, 10, 12),file.names)]
Data = lapply(file.path(path,selected.files),read.csv)
class(Data)
str(Data)
path = "C:/Users/607518069/Documents/R Projects/Coursera/R-Programming-Coursera/Data/specdata"
fileList = list.files(path)
file.names = as.numeric(sub("\\.csv$","",fileList))
selected.files = fileList[match(c(2, 4, 8, 10, 12),file.names)]
Data = lapply(file.path(path,selected.files),read.csv)
class(Data)
str(Data)
res = lapply(Data, function(x) x[complete.cases(x),])
res2 = data.frame()
for(i in 1:length(res)){
res2 <- rbind(res2,rownames<-(NULL), nob=nrow(res[[i]]))
}
res2 <- cbind(res2,id=c(2, 4, 8, 10, 12))
colnames(res2) <- c("nob","ID")
res2
rownames(res2) <- NULL
res2
path = "C:/Users/607518069/Documents/R Projects/Coursera/R-Programming-Coursera/Data/specdata"
fileList = list.files(path)
file.names = as.numeric(sub("\\.csv$","",fileList))
selected.files = fileList[match(c(2, 4, 8, 10, 12),file.names)]
Data = lapply(file.path(path,selected.files),read.csv)
class(Data)
str(Data)
res = lapply(Data, function(x) x[complete.cases(x),])
res2 = data.frame(row.names=NULL)
for(i in 1:length(res)){
res2 <- rbind(res2, nob=nrow(res[[i]]))
}
res2 <- cbind(res2,id=c(2, 4, 8, 10, 12))
colnames(res2) <- c("nob","ID")
res2
path = "C:/Users/607518069/Documents/R Projects/Coursera/R-Programming-Coursera/Data/specdata"
fileList = list.files(path)
file.names = as.numeric(sub("\\.csv$","",fileList))
selected.files = fileList[match(c(2, 4, 8, 10, 12),file.names)]
Data = lapply(file.path(path,selected.files),read.csv)
res = lapply(Data, function(x) x[complete.cases(x),])
res2 = data.frame(res2, row.names=NULL)
res2 = data.frame()
for(i in 1:length(res)){
res2 <- rbind(res2, nob=nrow(res[[i]]))
}
rownames(res2) <- NULL
res2 <- cbind(res2,id=c(2, 4, 8, 10, 12))
colnames(res2) <- c("nob","ID")
res2
res2 = res2[c("ID", "nob")]
res2
path = "C:/Users/607518069/Documents/R Projects/Coursera/R-Programming-Coursera/Data/specdata"
fileList = list.files(path)
file.names = as.numeric(sub("\\.csv$","",fileList))
selected.files = fileList[match(c(2, 4, 8, 10, 12),file.names)]
Data = lapply(file.path(path,selected.files),read.csv)
res = lapply(Data, function(x) x[complete.cases(x),])
res2 = data.frame()
for(i in 1:length(res)){
res2 <- rbind(res2, nob=nrow(res[[i]]))
}
rownames(res2) <- NULL
res2 <- cbind(res2,id=c(2, 4, 8, 10, 12))
res2
colnames(res2) <- c("nob","ID")
res2
res2 = res2[c("ID", "nob")]
res2
complete <- function(directory, id = 1:332) {
#set the path
path = "C:/Users/Fahad/Documents/R Projects/Coursera/R-Programming-Coursera/Data/"
path = c(path,directory)
path = paste(path,collapse="")
#get the file List in that directory
fileList = list.files(path)
#extract the file names and store as numeric for comparison
file.names = as.numeric(sub("\\.csv$","",fileList))
#select files to be imported based on the user input or default
selected.files = fileList[match(id,file.names)]
#import data
Data = lapply(file.path(path,selected.files),read.csv)
#get the complete cases
completeCases = lapply(Data, function(Data) Data[complete.cases(Data),])
#create a dataframe to return
res = data.frame()
#get the number of complete cases and put it in the result dataframe
for(i in 1:length(completeCases)){
res <- rbind(res, nob=nrow(completeCases[[i]]))
}
#add ID column
res <- cbind(res,id=id)
#remove rownames
rownames(res) <- NULL
#add column names
colnames(res) <- c("nob","id")
#re-arrange column names
res = res[c("id", "nob")]
#return the results dataframe
res
}
complete("specdata",1)
complete("specdata",1)
complete <- function(directory, id = 1:332) {
#set the path
"C:/Users/607518069/Documents/R Projects/Coursera/R-Programming-Coursera/Data/"
path = c(path,directory)
path = paste(path,collapse="")
#get the file List in that directory
fileList = list.files(path)
#extract the file names and store as numeric for comparison
file.names = as.numeric(sub("\\.csv$","",fileList))
#select files to be imported based on the user input or default
selected.files = fileList[match(id,file.names)]
#import data
Data = lapply(file.path(path,selected.files),read.csv)
#get the complete cases
completeCases = lapply(Data, function(Data) Data[complete.cases(Data),])
#create a dataframe to return
res = data.frame()
#get the number of complete cases and put it in the result dataframe
for(i in 1:length(completeCases)){
res <- rbind(res, nob=nrow(completeCases[[i]]))
}
#add ID column
res <- cbind(res,id=id)
#remove rownames
rownames(res) <- NULL
#add column names
colnames(res) <- c("nob","id")
#re-arrange column names
res = res[c("id", "nob")]
#return the results dataframe
res
}
complete("specdata",1)
complete <- function(directory, id = 1:332) {
#set the path
path = "C:/Users/607518069/Documents/R Projects/Coursera/R-Programming-Coursera/Data/"
path = c(path,directory)
path = paste(path,collapse="")
#get the file List in that directory
fileList = list.files(path)
#extract the file names and store as numeric for comparison
file.names = as.numeric(sub("\\.csv$","",fileList))
#select files to be imported based on the user input or default
selected.files = fileList[match(id,file.names)]
#import data
Data = lapply(file.path(path,selected.files),read.csv)
#get the complete cases
completeCases = lapply(Data, function(Data) Data[complete.cases(Data),])
#create a dataframe to return
res = data.frame()
#get the number of complete cases and put it in the result dataframe
for(i in 1:length(completeCases)){
res <- rbind(res, nob=nrow(completeCases[[i]]))
}
#add ID column
res <- cbind(res,id=id)
#remove rownames
rownames(res) <- NULL
#add column names
colnames(res) <- c("nob","id")
#re-arrange column names
res = res[c("id", "nob")]
#return the results dataframe
res
}
complete("specdata",1)
complete("specdata",c(2, 4, 8, 10, 12))
complete("specdata",30:25)
complete("specdata",3)
complete <- function(directory, id = 1:332) {
#set the path
path = "C:/Users/607518069/Documents/R Projects/Coursera/R-Programming-Coursera/Data/"
path = c(path,directory)
path = paste(path,collapse="")
#get the file List in that directory
fileList = list.files(path)
#extract the file names and store as numeric for comparison
file.names = as.numeric(sub("\\.csv$","",fileList))
#select files to be imported based on the user input or default
selected.files = fileList[match(id,file.names)]
#import data
Data = lapply(file.path(path,selected.files),read.csv)
#get the complete cases
completeCases = lapply(Data, function(Data) Data[complete.cases(Data),])
#create a dataframe to return
res = data.frame()
#get the number of complete cases and put it in the result dataframe
for(i in 1:length(completeCases)){
res <- rbind(res, nob=nrow(completeCases[[i]]))
}
#add ID column
res <- cbind(res,id=id)
#remove rownames
rownames(res) <- NULL
#add column names
colnames(res) <- c("nob","id")
#re-arrange column names
res = res[c("id", "nob")]
#return the results dataframe
res
}
complete("specdata")
complete("specdata",30:25)
library(datasets)
data(iris)
?iris
class(iris)
iris$Sepal.Length
iris$Species
tapply(iris$Sepal.Length, iris$Species, mean)
str(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
str(iris)
colMeans(iris)
colMeans(iris$Sepal.Length)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
class(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
class(mtcars)
spl = split(mtcars, mtcars$cyl) #this will split based on number of cyl
spl
lapply(spl, mean)
lapply(spl[[5]], mean)
lapply(spl[[,5]], mean)
debug(ls)
exit
2
2
3
1
end
exit()
1
1
1
1
2
2
2
22
3
3
34
4
45
55
6
6
777
87
8
9
10
10
10
undebug(ls)
q
n
spl
str(spl)
mean(unlist(sapply(spl, '[', 'hp')))
mapply(function(y) mean(spl$hp), x)
mapply(function(y) mean(spl$hp), spl)
mapply(function(y) mean(y$hp), spl)
abs(82.63636-209.21429)
makeCacheMatrix <- function(matrix = matrix()) {
#check if the object passed is a matrix...
if(!is.matrix(matrix))
{
stop("Object passed must be a matrix!")
}
## reset/initialise the cache
inversedCache <- NULL
##set up the matrix
set <- function(y) {
matrix <<- y
inversedCache <<- NULL
}
## getter method to return the Inverse Cached Matrix
get <- function() matrix
setInverse <- function(inverse) inversedCache <<- inverse
getInverse <- function() inversedCache
#setup list
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## The following function calculates the inverse of the special "matrix" created with the above function.
## However, it first checks to see if the inverse has already been calculated. If so, it gets the inverse from
## the cache and skips the computation. Otherwise, it calculates the inverse of the data and sets the value of
## the inversed matrix in the cache via the setInverse function.
## 1. check the user input
## 2. check to see if the inverse of x has already been calculated
## 3. if so, return the Inverse in the cache via the getInverse function
## 4. otherwise, calculate the inverse of the matrix
## 5. And set the value of the inverse in the cache via the setInverse function.
cacheSolve <- function(x, ...) {
#check for the wrong input
if((!is.list(x))|(names(x[1])!="set")|(names(x[2])!="get")|(names(x[3])!="setInverse")|(names(x[4])!="getInverse"))
{
stop("Input must be a list generated from the function makeCacheMatrix!")
}
## Return a matrix that is the inverse of 'x'
## get the current cached Inverse
m <- x$getInverse()
#check if its calculated before and not empty
if(!is.null(m)) {
message("getting cached data")
return(m)
}
#else calculate the Inverse and cache it
data <- x$get()
results <- solve(data, ...)
x$setInverse(results)
results
}
myMatrix = matrix(1:4,2,2)
myMatrix
makeCacheMatrix(myMatrix)
x = makeCacheMatrix(myMatrix)
cacheSolve(x)
x
cacheSolve(x)
x <- c(a = 100, b = 99, c = 98)
x
class(x)
y <- list(a = 100, b = 99, c = 98)
y
y$a
y$b
y$c
y <- list(a = 100:200, b = 99:100, c = 98:100)
y$c
y$a
x = makeCacheMatrix(y)
x = makeCacheMatrix(myMatrix)
class(x)
cacheSolve(x)
cacheSolve(x, set)
myMatrix = matrix(1:4,2,2)
x = makeCacheMatrix(myMatrix)
cacheSolve(x, set)
myMatrix = matrix(1:4,2,2)
x = makeCacheMatrix(myMatrix)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
myMatrix$get()
myMatrix = matrix(1:4,2,2)
x = makeCacheMatrix(myMatrix)
x$get()
x$getInverse
cacheSolve(x)
x$getInverse
myMatrix = matrix(c(0,5,99,66), nrow=2, ncol=2))
myMatrix = matrix(c(0,5,99,66), nrow=2, ncol=2)
x$get()
x = makeCacheMatrix(myMatrix)
cacheSolve(x)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()         # Returns original matrix
cacheSolve(amatrix)   # Computes, caches, and returns    matrix inverse
amatrix$getinverse()  # Returns matrix inverse
amatrix$getInverse()  # Returns matrix inverse
cacheSolve(amatrix)   # Returns cached matrix inverse using previously computed matrix inverse
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(amatrix)   # Computes, caches, and returns new matrix inverse
amatrix$get()         # Returns matrix
amatrix$getInverse()  # Returns matrix inverse
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "19dc655defc5726ea423", "eccb83db875b93387eae87a9399fa808d94bcea0")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
oauth_endpoints("github")
myapp <- oauth_app("github", "19dc655defc5726ea423", "eccb83db875b93387eae87a9399fa808d94bcea0")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
setwd("~/R Projects/Coursera/Getting-and-Cleaning-Data/Data")
communities = read.csv("Quiz4_Q1.csv")
str(communities)
names(communities)
testString = "This is a string"
strsplit(testString,"is")
strsplit(testString,"\\is")
strsplit(testString,"is\\")
strsplit(testString,"is")
strsplit(testString,"a")
strsplit(testString," ")
names(communities)
strsplit(names(communities),"wgtp")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",destfile="Quiz4_Q2.csv")
gdp <- read.csv("Quiz4_Q2.csv")
names(gdp)
head(gdp$Gross.domestic.product.2012)
gdp$Gross.domestic.product.2012
gdp$X
names(gdp)
gdp$X.1
gdp$X.2
names(gdp)
gdp$X.3
gsub(",", "", gdp$X.3, fixed = TRUE)
class(gsub(",", "", gdp$X.3, fixed = TRUE) )
class(gdp$X.3)
as.character(gdp$X.3)
gsub(",", "", gdp$X.3, fixed = TRUE)
removeCommas = gsub(",", "", gdp$X.3, fixed = TRUE)
removeCommas
gsub(".", "", removeCommas, fixed = TRUE)
removeDots = gsub(".", "", removeCommas, fixed = TRUE)
removeDots
removeDots[-2]
removeDots[c(-2,-3)]
removeDollarSign = removeDots[c(-2,-3)]
removeDollarSign
mean(as.numeric(removeDollarSign),na.rm=T)
as.numeric(removeDollarSign)
mean(as.numeric(removeDollarSign),na.rm=T)
gdp$X.4
gdp$X.5
gdp$X.6
gdp$X.7
gdp$X.8
removeDollarSign
mean(as.numeric(removeDollarSign),na.rm=T)
gdp = subset(gdp, gdp$X != "" & gdp$Gross.domestic.product.2012 != "")
gdp$X.3
gsub(",", "", gdp$X.3, fixed = TRUE)
removeCommas = gsub(",", "", gdp$X.3, fixed = TRUE)
removeCommas
mean(as.numeric(removeCommas),na.rm=T)
mean(as.numeric(removeCommas))
gdp$X
gdp$Gross.domestic.product.2012
gdp$X.2
grep("^United",gdp$X.2)
grep("*United",gdp$X.2")
grep("*United",gdp$X.2)
grep("*United",gdp$X.2)
grep("United$",gdp$X.2)
grep("Un.d",gdp$X.2)
grep("Un.ted",gdp$X.2)
grep("United$",gdp$X.2)
grep("*United",gdp$X.2)
grep("^United",gdp$X.2)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",destfile="Quiz4_Q4.csv")
education = read.csv("Quiz4_Q4.csv")
education
str(education)
gdp$X
education$CountryCode
mergedData = merge(gdp, education, by.x="X", by.y="CountryCode", all=FALSE)
str(mergedData)
grep("June", mergedData)
which(sapply(mergedData, function(x) any(grep("June",x))))
table(mergedData$Special.Notes)
names(mergedData)[grepl('June', mergedData)]
names(education)[grepl('June', education)]
grep("June", mergedData$Special.Notes)
table(grep("June", mergedData$Special.Notes))
grep("June", mergedData$Special.Notes)
grep("[Ff]iscal [Yy]ear June", mergedData$Special.Notes)
grep("June", mergedData$Special.Notes)
grep("[Ff]iscal [Yy]ear + June", mergedData$Special.Notes)
grep("[Ff]iscal (.*) + June", mergedData$Special.Notes)
grep("[Ff]iscal + (.*) + June", mergedData$Special.Notes)
grep("[Ff]+iscal (.*) + June", mergedData$Special.Notes)
grep("[Ff]+iscal + June", mergedData$Special.Notes)
grep("[Ff]iscal+ June+", mergedData$Special.Notes)
grep("[Ff]iscal+ June", mergedData$Special.Notes)
grep("[Ff]iscal June", mergedData$Special.Notes)
grep("[Ff]iscal", mergedData$Special.Notes)
mergedData$Special.Notes[2]
mergedData$Special.Notes[9]
grep("[Jj]une", mergedData$Special.Notes)
grep("[Ff]iscal ( +[^ ]+ +) [Jj]une", mergedData$Special.Notes)
grep("[Ff]iscal ( +[^]+ +) [Jj]une", mergedData$Special.Notes)
grep("[Ff]iscal ( +[Yy]ear+ +) [Jj]une", mergedData$Special.Notes)
grep("[Ff]iscal & [Jj]une", mergedData$Special.Notes)
grep("[Ff]iscal&[Jj]une", mergedData$Special.Notes)
grep("[Ff]iscal|[Jj]une", mergedData$Special.Notes)
grep("[Ff]iscal [Jj]une", mergedData$Special.Notes)
grep("^[Ff]iscal|[Jj]une", mergedData$Special.Notes)
grep("^(.)[Jj]une", mergedData$Special.Notes)
grep("(.)[Jj]une(.)", mergedData$Special.Notes)
mergedData$Special.Notes[9]
mergedData$Special.Notes[16]
mergedData$Special.Notes[29]
mergedData$Special.Notes[51]
mergedData$Special.Notes[65]
mergedData$Special.Notes[89]
mergedData$Special.Notes[95]
