library(ggplot2)
library(caTools)
ggplot(train_numeric, aes(x=Happy)) + geom_histogram(binwidth=5, color="blue") + facet_grid( . ~ Gender)
ggplot(imputed_train, aes(x=Happy)) + geom_histogram(binwidth=5, color="blue") + facet_grid( . ~ Gender)
ggplot(imputed_train, aes(x=Happy)) + geom_histogram(binwidth=5, color="blue")
ggplot(imputed_train, aes(x=Happy)) + geom_histogram()
hist(imputed_train$Happy)
imputed_train$Happy = as.integer(imputed_train$Happy)
hist(imputed_train$Happy)
imputed_train$Happy = as.factor(imputed_train$Happy)
hist(imputed_train$Happy)
ggplot(imputed_train, aes(x=Happy)) + geom_histogram(binwidth=5, color="blue")
limited.splitTrain = splitTrain
limited.splitTest = splitTest
limited.splitTrain$Happy = NULL
limited.splitTest$Happy = NULL
summary(limited.splitTrain)
str(limited.splitTrain)
km = kmeans(limited.splitTrain, centers=4)
km
km = kmeans(limited.splitTrain, centers=5)
is.na(limited.splitTrain)
summary(limited.splitTrain)
km = kmeans(limited.splitTrain, centers=5)
limited.splitTrain$UserID = NULL
limited.splitTest$UserID = NULL
km = kmeans(limited.splitTrain, 5)
preproc = preProcess(limited.splitTrain)
library(caret)
preproc = preProcess(limited.splitTrain)
str(limited.splitTrain)
cube = function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
y
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
`:`
':'
?':'
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq = seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(c,1c2),each=10)
rep(c(0,1,2),each=10)
setwd("~/R Projects/AnalyticsEdge/Data")
elantra = read.csv("elantra.csv")
train = subset(elantra, elantra$Year <= 2012)
test = subset(elantra, elantra$Year >= 2013)
train$MonthFactor = as.factor(train$Month)
LinRegModel4 = lm(ElantraSales ~ MonthFactor + Unemployment + CPI_energy + CPI_all , data=train)
LinRegModel4Pred = predict(LinRegModel4 , newdata=test)
test$MonthFactor = as.factor(test$Month)
LinRegModel4Pred = predict(LinRegModel4 , newdata=test)
max(abs(test$ElantraSales-LinRegModel4Pred))
which.max(abs(test$ElantraSales-LinRegModel4Pred))
test$MonthFactor[14]
which.max(abs(LinRegModel4Pred))
test$MonthFactor[30]
test$MonthFactor[9]
max(LinRegModel4Pred)
which.max(LinRegModel4Pred)
which.max(test$ElantraSales-LinRegModel4Pred)
test$MonthFactor[14]
test$Month[14]
test$Year[14]
test$Month[5]
which.max(test$ElantraSales-LinRegModel4Pred)
test$Year[5]
which.max(abs(test$ElantraSales-LinRegModel4Pred))
test$Month[14]
test$Year[14]
test$Month[5]
news = read.csv("nytimes.csv")
str(news)
news = read.csv("nytimes.csv", stringsAsFactors=FALSE)
str(news)
summary(news)
table(news$popular)
105/nrow(news)
prop.table(news$popular)
prop.table(table(news$popular)
prop.table(table(news$popular))
prop.table(table(news$popular))
cor(news$word.count, news$popular)
cor(news)
cor(news$popular, news$word.count)
str(news$headline)
cor(news$popular, length(news$headline)
cor(news$popular, length(news$headline))
cor(news$popular, length(news$headline))
for(i in 1:973){
news$headline.word.count[i] <- length(news$headline[i])
}
news$headline.word.count
for(i in 1:973){
news$headline.word.count[i] <- nchar(news$headline[i])
}
news$headline.word.count
cor(news$popular, news$headline.word.count))
cor(news$popular, news$headline.word.count)
class(news$headline)
install.packages("stringr")
library(stringr)
test = as.character(c("My name is Fahad", "Her name is Annum"))
test
class(test)
news$headline
test = as.character(c("My name is Fahad", "Her name is Annum", "Rish is my sis"))
test
word(test,start=1L, end=start)
word(test,start=1L)
word(test,start=1L, sep=fixed(" "))
word(news$headline)
news$headline
cor(news$popular, news$headline.word.count)
news$popular = as.factor(news$popular)
news$type = as.factor(news$type)
str(news)
library(caTools)
set.seed(144)
spl = sample.split(news$popular, SplitRatio=0.7)
train = subset(news,spl==TRUE)
test = subset(news,spl == FALSE)
LogModel = glm(popular ~ print + type + word.count, data=train, family=binomial)
summary(LogModel)
str(train$type)
train$type
-0.8468333 * 1 + 0.9055929*2 + 682*0.0002600
682*0.0002600
0.9055929*2
-0.8468333 * 1 + 0.9055929*1 + 682*0.0002600
summary(LogModel)
-0.8468333 * 1 + 0.9055929*2 + 682*0.0002600
-2.5075573 -0.8468333 * 1 + 0.9055929*1 + 682*0.0002600
exp(-2.271478)/(1 + exp(-2.271478))
LogRegPred = predict(LogModel, newdata=test, type="response")
table(test$popular, LogRegPred >= 0.5)
LogRegPred
table(test$popular, LogRegPred >= 0.5)
table(test$popular)
260/nrow(test)
summary(LogRegPred)
library(ROCR)
pred = prediction(LogRegPred, test$popular)
as.numeric(performance(pred, "auc")@y.values)
library(ROCR)
ROCRperf = performance(pred, "tpr", "fpr")
plot(ROCRperf)
plot(ROCRperf,colorize=TRUE)
plot(ROCRperf,colorize=TRUE,  print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
plot(ROCRperf,colorize=TRUE,  print.cutoffs.at=seq(0,1,by=0.01), text.adj=c(-0.2,1.7))
plot(ROCRperf,colorize=TRUE,  print.cutoffs.at=seq(0,1,by=0.2), text.adj=c(-0.2,1.7))
plot(ROCRperf,colorize=TRUE,  print.cutoffs.at=seq(0,1,by=0.15), text.adj=c(-0.2,1.7))
plot(ROCRperf,colorize=TRUE,  print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
plot(ROCRperf,colorize=TRUE,  print.cutoffs.at=seq(0,1,by=0.5), text.adj=c(-0.2,1.7))
plot(ROCRperf,colorize=TRUE,  print.cutoffs.at=seq(0,1,by=0.09), text.adj=c(-0.2,1.7))
set.seed(144)
library(caret)
library(e1071)
tree.control = trainControl(method="cv", number=10)
50 * 0.01
cp.grid = expand.grid(.cp = seq(0.01, 0.5, 0.01) )
tr= train(popular ~ print + type + word.count , data=train, method="rpart", trControl=tree.control, tuneGrid=cp.grid)
library(rpart)
tr= train(popular ~ print + type + word.count , data=train, method="rpart", trControl=tree.control, tuneGrid=cp.grid)
tr
popular.Tree.CP = rpart(popular ~ . , data=train, control=rpart.control(cp=0.01))
popular.Tree.CP = rpart(popular ~ . ,method="class", data=train, control=rpart.control(cp=0.01))
prp(popular.Tree.CP)
library(rpart)
library(rpart.plot)
popular.Tree.CP = rpart(popular ~ . ,method="class", data=train, control=rpart.control(cp=0.01))
prp(popular.Tree.CP)
popular.Tree.CP = rpart(popular ~ print + type + word.count ,method="class", data=train, control=rpart.control(cp=0.01))
prp(popular.Tree.CP)
library(tm)
corpusTitle = Corpus(VectorSource(news$snippet))
corpus = Corpus(VectorSource(news$snippet))
rm(corpusTitle)
corpusAdded
corpus
corpus[[1]]
corpus[[2]]
corpus[[3]]
corpus[[1]]
corpus = tm_map(corpus, tolower)
corpus[[1]]
corpus = tm_map(corpus, removePunctuation)
corpus[[1]]
corpus = tm_map(corpus, removeWords, stopwords("english"))
corpus[[1]]
corpus = tm_map(corpus, stemDocument)
corpus[[1]]
dtm = DocumentTermMatrix(corpus)
dtm
spdtm = removeSparseTerms(dtm, 0.95)
spdtm
articleText = as.data.frame(as.matrix(spdtm))
str(articleText)
sort(colSums(articleText))
summary(articleText)
articleText$print = news$print
articleText$type = news$type
articleText$word.count = news$word.count
articleText$popular = news$popular
str(articleText)
trainText = subset(articleText, spl==TRUE)
testText = subset(articleText, spl==FALSE)
glmText = glm(popular ~ . , data=trainText, family=binomial)
summary(LogModel)
trainText
summary(glmText)
LogRegPred2 = predict(glmText, newdata=testText, type="response")
pred2 = prediction(LogRegPred2, testText$popular)
as.numeric(performance(pred2, "auc")@y.values)
as.numeric(performance(pred, "auc")@y.values)
table(testText$popular, LogRegPred2 >= 0.5)
summary(LogRegPred2)
stocks = read.csv("nasdaq_returns.csv")
str(stocks)
summary(stocks)
table(stocks$stock_symbol)
head(stocks)
sum(table(stocks$stock_symbol))
table(stocks$industry)
str(stocks)
stocks$ret2000.12
sort(stocks$ret2000.12)
1153-850
tapply(stocks$ret2000.12,stocks$stock_symbol, sum)
sort(tapply(stocks$ret2000.12,stocks$stock_symbol, sum))
sum(table(stocks$ret2000.10))
sum(table(stocks$stock_symbol))
sum(table(stocks$stock_symbol, stocks$ret2000.10))
table(stocks$stock_symbol, stocks$ret2000.10))
table(stocks$stock_symbol, stocks$ret2000.10)
str(stocks)
sort(tapply(stocks$ret2000.12,stocks$stock_symbol, sum))
sort(table(tapply(stocks$ret2000.12,stocks$stock_symbol, sum)))
sort(stocks$ret2000.12>0.10)
sum(sort(stocks$ret2000.12>0.10))
sum(sort(stocks$ret2000.12>=0.10))
sum(sort(stocks$ret2000.12<=-0.10))
table(stocks$industry, stocks$ret2008.10)
sort(table(stocks$industry, stocks$ret2008.10))
stocks$ret2008.10
tapply(stocks$ret2008.10,stocks$industry,sum)
sort(tapply(stocks$ret2008.10,stocks$industry,sum))
sort(tapply(stocks$ret2000.02,stocks$industry,mean))
sort(tapply(stocks$ret2000.02,stocks$industry,sum))
sort(tapply(stocks$ret2000.02,stocks$industry,mean))
sort(tapply(stocks$ret2008.10,stocks$industry,mean))
sort(tapply(stocks$ret2000.02,stocks$industry,mean))
sort(tapply(stocks$ret2008.10,stocks$industry,mean))
sort(tapply(stocks$ret2008.10,stocks$industry,sum))
tapply(stocks$ret2008.10,stocks$industry,mean)
sort(tapply(stocks$ret2000.02,stocks$industry,mean))
sort(tapply(stocks$ret2008.10,stocks$industry,mean))
limited = stocks
limited$stock_symbol = NULL
limited$industry = NULL
limited$subindustry = NULL
str(limited)
which.max(mean(limited))
mean(limited)
col_names = colnames(limited)
col_names
res = data.frame()
for(i in col_names){
res$col_name = i
res$mean = mean(limited[i])
}
limited[ret2000.01]
limited$ret2000.01
head(limited)
head(limited[,1])
res = data.frame(ID=limited[,1], Means=rowMeans(limited[,-1]))
str(res)
sort(res$Means)
rm(res)
rm(col_names)
rm(i)
sor(colMeans(limited)
sor(colMeans(limited))
sor(colMeans(limited))
sort(colMeans(limited))
which.max(colMeans(limited))
which.min(colMeans(limited))
setwd("~/R Projects/Data")
dailyKOS = read.csv("dailykos.csv")
str(dailyKOS)
class(dailyKOS)
limitedMatrix = as.matrix(limited)
str(limitedMatrix)
limitedVector = as.vector(limitedMatrix)
str(limitedVector)
dailyKOSMatrix = as.matrix(dailyKOS)
str(dailyKOSMatrix)
dailyKOSVector = as.vector(dailyKOSMatrix)
str(dailyKOSVector)
dailyKOS = read.csv("dailykos.csv")
dailyKOSMatrix = as.matrix(dailyKOS)
dailyKOSVector = as.vector(dailyKOSMatrix)
str(dailyKOSVector)
str(dailyKOSMatrix)
3430*1546
str(dailyKOSVector)
distance = dist(limited, method="euclidean")
LimitedClusters = hclust(distance, method="ward")
LimitedClusters
plot(LimitedClusters)
rm(dailyKOS)
rm(dailyKOSMatrix)
rm(dailyKOSVector)
cluster5 = cutree(LimitedClusters, k=5)
table(cluster5)
sort(table(cluster5))
cluster1 = subset(limited, cluster5 == 1)
cluster2 = subset(limited, cluster5 == 2)
cluster3 = subset(limited, cluster5 == 3)
cluster4 = subset(limited, cluster5 == 4)
cluster5 = subset(limited, cluster5 == 5)
cluster1 = subset(stocks, cluster5 == 1)
cluster2 = subset(stocks, cluster5 == 2)
cluster3 = subset(stocks, cluster5 == 3)
cluster4 = subset(stocks, cluster5 == 4)
cluster5 = subset(stocks, cluster5 == 5)
cluster3
table(cluster5)
table(cluster5)
sort(table(cluster5))
cluster5 = cutree(LimitedClusters, k=5)
rm(cluster1)
rm(cluster2)
rm(cluster3)
rm(cluster4)
rm(cluster5)
cluster5 = cutree(LimitedClusters, k=5)
sort(table(cluster5))
cluster5
STR(cluster5)
str(cluster5)
mvt = read.csv("mvtWeek1.csv")
str(mvt)
max(mvt$ID)
min(mvt$Beat)
summary(mvt)
class(mvt$Date)
summary(mvt$Date)
DateConvert = as.Date(strptime(mvt$Date, "%m/%d/%y %H:%M"))
DateConvert
summary(DateConvert)
mvt$Month = months(DateConvert)
mvt$Weekday = weekdays(DateConvert)
mvt$Weekday
mvt$Month
mvt$Date = DateConvert
table(mvt$Month, mvt$LocationDescription)
table(mvt$Month)
sort(table(mvt$Month))
mvt$Weekday
table(mvt$Weekday)
sort(table(mvt$Weekday))
table(mvt$Arrest,mvt$Month)
sort(table(mvt$Arrest,mvt$Month))
table(mvt$Arrest,mvt$Month)
hist(mvt$Date, breaks=100)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
data <- x$get()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
install.packages("httpuv")
library(httpuv)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "19dc655defc5726ea423", "eccb83db875b93387eae87a9399fa808d94bcea0")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp
github_token
class(github_token)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
install.packages("jsonlite")
library(jsonlite)
content(req)
json <- content(req)
json2 <- fromJSON(toJSON(json))
names(json2)
names(json2$owner$login)
json2$owner$login
json2 <- fromJSON(toJSON(json, pretty=TRUE))
json2
cat(json2)
json2 <- fromJSON(toJSON(json))
cat(json2)
class(json2)
str(json2)
json2 <- fromJSON(toJSON(json, pretty=TRUE))
json2
cat(json2)
head(json2)
setwd("~/R Projects/Coursera/Getting-and-Cleaning-Data/Data")
install.packages("sqldf")
library(sqldf)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile=Quiz2_Q2.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile="Quiz2_Q2", method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile="Quiz2_Q2.csv", method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile="Quiz2_Q2.csv")
acs = read.csv("Quiz2_Q2.csv")
str(acs)
sqldf("select * from acs where AGEP <50 and pwgtp1")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs")
acs
unique(acs$AGEP)
sqldf("select unique AGEP from acs")
sqldf("select distinct AGEP from acs")
unique(acs$AGEP)
sqldf("select distinct pwgtp1 from acs")
sqldf("select AGEP where unique from acs")
sqldf("select distinct pwgtp1 from acs") #
unique(acs$AGEP)
sqldf("select unique AGEP from acs") #not a SQL command
sqldf("select distinct AGEP from acs")
unique(acs$AGEP)
